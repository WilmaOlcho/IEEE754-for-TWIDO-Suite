SECTION     0
(*SECTTITLE:END OF PROGRAM; There can't be subrountines without END of program*)
(*SECTCOMMENT:*)
LD    1
ST    %M0
END
SR1:
(*SECTTITLE:DWORD to IEEE754*)
(*SECTCOMMENT:*)
LD    1
[ %MD990 := %MD984 ]
LD    1
AND   %MW991:X15
[ %MD990 := %MD990 - 1 ]
[ %MW990 := NOT( %MW990 ) ]
[ %MW991 := NOT( %MW991 ) ]
ST    %M250                   (* SIGN BIT*)
LD    1
[ %MW992 := 31 ]
%L27:
LD    1                       (* HSB LOADING*)
ANDN  %MW991:X15
[ %MW992 := %MW992 - 1 ]      (* IF MSB IS 0, SHIFT EVERYTHING TO RIGHT AND DECREASE EXPONENT*)
[ %MW991 := SHL( %MW991, 1 ) ]
[ %MW990 := SHL( %MW990, 1 ) ]
LD    %S17
[ %MW991 := %MW991 OR #1 ]
R     %S17
LD    1
ANDN  %MW991:X15
AND   [ %MW992 >= 0 ]         (* AGAIN IF THERE IS STILL NO 1 AT THE END*)
JMPC  %L27
LD    1
[ %MW993 := 8 ]
%L26:                         (* SHIFTING VALUE INTO RIGHT POSITION WITH LOSS OF SOME LSBIS*)
LD    1
[ %MW990 := SHR( %MW990, 1 ) ]
[ %MW993 := %MW993 - 1 ]
[ %MW991 := SHR( %MW991, 1 ) ]
LD    %S17
[ %MW990 := %MW990 OR #8000 ]
R     %S17
LD    [ %MW993 > 0 ]
JMPC  %L26
LD    1
[ %MW991 := %MW991 AND #7F ]
LD    1
[ %MW992 := %MW992 + 127 ]    (* ADDING BIAS INTO EXPONENT*)
[ %MW992 := SHL( %MW992, 7 ) ] (* SHIFTING EXPONENT INTO RIGHT POSITION*)
[ %MW991 := %MW991 OR %MW992 ] (* COMBINE MANTISA AND EXPONENT IN MSBYTE*)
LD    %M250
[ %MW991 := %MW991 OR #8000 ] (* ADD SIGN BIT INTO MSBYTE*)
LD    1
[ %MD986 := %MD990 ]
LD    1
R     %S17
R     %M255
R     %M254
R     %M253
R     %M252
R     %M251
R     %M250
R     %S17
RET
SR2:
(*SECTTITLE:IEEE754 TO DWORD*)
(*SECTCOMMENT:*)
LD    1
[ %MD990 := %MD984 ]
LD    1
AND   %MW991:X15
ST    %M250                   (* SIGN BIT*)
LD    1
[ %MW991 := %MW991 AND #7FFF ] (* BITMASKING/CLEARING SIGN BIT FROM INPUT DATA*)
[ %MW992 := %MW991 AND #7F80 ] (* GETTING EXPONENT VALUE*)
[ %MW991 := %MW991 AND #7F ]  (* CLEARING MANTISA*)
[ %MW991 := %MW991 OR #80 ]   (* UNHIDING HIDDEN BIT*)
[ %MW992 := SHR( %MW992, 7 ) ] (* NORMALISING EXPONENT VALUE*)
[ %MW992 := %MW992 - 127 ]    (* SUBSTRACTING BIAS VALUE*)
NOP         (* %MW992 IS NOW CLEAR EXPONENT!*)
LD    1
[ %MW993 := 0 ]
[ %MW994 := 0 ]
%L19:
LD    [ %MW992 > 24 ]
[ %MW991 := SHL( %MW991, 1 ) ] (* SHIFTING VALUES TO EXPONENT POSITION*)
[ %MW990 := SHL( %MW990, 1 ) ]
LD    [ %MW992 > 24 ]
AND   %S17
[ %MW991 := %MW991 OR #1 ]    (* ADDING CARRY BIT INTO TEMPORARY*)
LD    [ %MW992 > 24 ]
[ %MW992 := %MW992 - 1 ]
JMPC  %L19
LD    1
[ %MW993 := 23 - %MW992 ]
%L25:
LD    [ %MW993 > 0 ]
[ %MW990 := SHR( %MW990, 1 ) ] (* SHIFTING VALUES TO EXPONENT POSITION*)
[ %MW991 := SHR( %MW991, 1 ) ]
AND   %S17
[ %MW990 := %MW990 OR #8000 ] (* ADDING CARRY BIT INTO TEMPORARY*)
LD    [ %MW993 > 0 ]
[ %MW993 := %MW993 - 1 ]
JMPC  %L25
LD    %M250
[ %MW990 := NOT( %MW990 ) ]
[ %MW991 := NOT( %MW991 ) ]
[ %MD990 := %MD990 + 1 ]
NOP                           (* MANTISA IS NOW RAISED TO EXPONENT*)
LD    1
[ %MD986 := %MD990 ]
LD    1
R     %S17
R     %M255
R     %M254
R     %M253
R     %M252
R     %M251
R     %M250
RET
SR3:
(*SECTTITLE:IEEE754 Multiplication*)
(*SECTCOMMENT:*)
LD    1
[ %MD990 := %MD984 ]
[ %MD992 := %MD988 ]
LD    1
AND   %MW991:X15
ST    %M251
LD    1
AND   %MW993:X15
ST    %M252
LD    %M251
XOR   %M252
ST    %M250                   (* SIGN BIT IS S1 XOR S2*)
LD    %M251
LD    1                       (* GETTING EXPONENT FROM INPUT A*)

[ %MW991 := %MW991 AND #7FFF ] (* BITMASKING/CLEARING SIGN BIT FROM INPUT DATA*)
[ %MW994 := %MW991 AND #7F80 ] (* GETTING EXPONENT VALUE*)
[ %MW991 := %MW991 AND #7F ]  (* CLEARING MANTISA*)
[ %MW994 := SHR( %MW994, 7 ) ] (* NORMALISING EXPONENT VALUE*)


LD    1                       (* GETTING EXPONENT FROM INPUT B*)
[ %MW993 := %MW993 AND #7FFF ] (* BITMASKING/CLEARING SIGN BIT FROM INPUT DATA*)
[ %MW995 := %MW993 AND #7F80 ] (* GETTING EXPONENT VALUE*)
[ %MW993 := %MW993 AND #7F ]  (* CLEARING MANTISA*)
[ %MW995 := SHR( %MW995, 7 ) ] (* NORMALISING EXPONENT VALUE*)


LD    1
[ %MW996 := %MW994 + %MW995 ] (* ADDING EXPONENTS*)
[ %MW996 := %MW996 - 127 ]    (* SUBSTRACTING BIAS VALUE*)
LD    1                       (* GETTING MANTISAS FOR MULTIPLYING*)
[ %MW1000 := %MW990 ]
[ %MW1001 := %MW991 OR #8000 ] (* 'HIDDEN BIT' UNHIDING*)
[ %MW1002 := %MW992 ]
[ %MW1003 := %MW993 OR #8000 ]
LD    [ %MD990 = 0 ]          (* UNABLE TO MULTIPLY ANYTHING WITH 0*)
JMPC  %L30
LD    [ %MD992 = 0 ]
JMPC  %L30
%L20:
LD    1
ANDN  %MW1001:X15             (* SHIFTING LEFT TO '1' AT THE EDGE*)
JMPC  %L21
LD    1
JMP   %L22
%L21:
LD    1
[ %MW1001 := SHL( %MW1001, 1 ) ]
[ %MW1000 := SHL( %MW1000, 1 ) ]
LD    %S17
[ %MW1001 := %MW1001 OR #1 ]
R     %S17
LD    1
JMPC  %L20
%L22:
LD    1
ANDN  %MW1003:X15             (* SAME WITH SECOND VALUE*)
JMPC  %L23
LD    1
[ %MD1008 := %MD1000 ]
[ %MW1005 := 0 ]
JMP   %L24
%L23:
LD    1
[ %MW1003 := SHL( %MW1003, 1 ) ]
[ %MW1002 := SHL( %MW1002, 1 ) ]
LD    %S17
[ %MW1003 := %MW1003 OR #1 ]
R     %S17
LD    1
JMPC  %L22
%L24:
LD    1
AND   %MW991:X15
[ %MD1008 := %MD1008 + %MD1002 ] (* ADDING VALUES TOGETHER*)
LD    1
ST    %M255
LD    1
R     %S17
LD    1
[ %MW1002 := SHR( %MW1002, 1 ) ]
[ %MW1003 := SHR( %MW1003, 1 ) ] (* MOVING SECOND VALUE RIGHT UNTIL NEXT '1' IS FOUND - THEN REPEAT ADDING*)
LD    %S17
[ %MW1002 := %MW1002 OR #8000 ]
LD    1
R     %S17
[ %MW1005 := %MW1005 + 1 ]
LD    [ %MW1005 > 23 ]        (* THERE IS NO REASON TO ADDING MORE*)
JMPCN %L24
LD    1
JMP   %L31
%L30:
LD    1
[ %MD1008 := 0 ]              (* THE RESULT OF MULTIPLYING WITH'0' IS ALWAYS '0'*)
%L31:
LD    %M255
[ %MW1008 := SHR( %MW1008, 1 ) ] (* NORMALISING MANTISA IF NEEDED*)
[ %MW1009 := SHR( %MW1009, 1 ) ]
LD    %S17
AND   %M255
[ %MW1008 := %MW1008 OR #8000 ]
LD    1
[ %MD998 := %MD1008 ]         (* MANTISSAS ARE MULTIPLIED*)
R     %S17
LD    %M255
[ %MW996 := %MW996 + 1 ]
LD    1
[ %MW1000 := 0 ]
%L32:
LD    1
[ %MW998 := SHR( %MW998, 1 ) ] (* SHIFTING MANTISA INTO RIGHT POSITION AND TRUNCATE FOR 24 BITS*)
[ %MW999 := SHR( %MW999, 1 ) ]
LD    %S17
[ %MW998 := %MW998 OR #8000 ]
R     %S17
LD    1
[ %MW1000 := %MW1000 + 1 ]
LD    [ %MW1000 <= 8 ]
JMPC  %L32
LD    1
[ %MW999 := %MW999 AND #7F ]  (* REMOVING 'HIDDEN' BIT*)
LD    1
[ %MW996 := SHL( %MW996, 7 ) ] (* SHIFTING EXPONENT VALUE INTO RIGHT POSITION*)
[ %MW999 := %MW999 OR %MW996 ] (* COMBINING MSBYTE WITH EXPONENT VALUE*)
LD    %M250
[ %MW999 := %MW999 + #8000 ]
LD    1
[ %MD986 := %MD998 ]
LD    1
R     %M255
R     %M254
R     %M253
R     %M252
R     %M251
R     %M250
R     %S17
RET
SR4:
(*SECTTITLE:IEEE754 addition*)
(*SECTCOMMENT:*)
LD    1
[ %MD990 := %MD984 ]
[ %MD992 := %MD988 ]
LD    1
AND   %MW991:X15
ST    %M250
LD    1
AND   %MW993:X15
ST    %M251
LD    1                       (* GETTING EXPONENT FROM INPUT A*)
[ %MW991 := %MW991 AND #7FFF ] (* BITMASKING/CLEARING SIGN BIT FROM INPUT DATA*)
[ %MW994 := %MW991 AND #7F80 ] (* GETTING EXPONENT VALUE*)
[ %MW991 := %MW991 AND #7F ]  (* CLEARING MANTISA*)
[ %MW994 := SHR( %MW992, 7 ) ] (* NORMALISING EXPONENT VALUE*)
LD    1                       (* GETTING EXPONENT FROM INPUT B*)
[ %MW993 := %MW993 AND #7FFF ] (* BITMASKING/CLEARING SIGN BIT FROM INPUT DATA*)
[ %MW995 := %MW993 AND #7F80 ] (* GETTING EXPONENT VALUE*)
[ %MW993 := %MW993 AND #7F ]  (* CLEARING MANTISA*)
[ %MW995 := SHR( %MW992, 7 ) ] (* NORMALISING EXPONENT VALUE*)
LD    1
[ %MW996 := %MW994 - %MW995 ] (* SUBSTRACTING EXPONENTS*)
LD    [ %MW996 < 0 ]
[ %MW996 := %MW995 - %MW994 ] (* EXPONENTS DIFFERENCE*)
ST    %M253                   (* SECOND VALUE IS HIGHER*)
LD    %M253                   (* INTERCHANGE VALUES IF SECOND IS HIGHER*)
[ %MW998 := %MW990 ]
[ %MW999 := %MW991 ]
[ %MW990 := %MW992 ]
[ %MW991 := %MW993 ]
[ %MW992 := %MW998 ]
[ %MW993 := %MW999 ]
[ %MW994 := %MW995 ]
LD    1                       (* GETTING MANTISAS FOR ADDITION*)
[ %MW1000 := %MW990 ]
[ %MW1001 := %MW991 OR #8000 ] (* 'HIDDEN BIT' UNHIDING*)
[ %MW1002 := %MW992 ]
[ %MW1003 := %MW993 OR #8000 ]
LD    %M250
XOR   %M251
ST    %M252                   (* SIGN BITS ARE NOT EQUAL -> SUBSTRACT MANTISAS*)
LD    %M253
AND   %M251
ST    %M255
LD    %M250
ANDN  %M253
ST    %M255                   (* M255 IS S3*)
%L16:                         (* SHIFTING SMALLER VALUE INTO RIGHT POSITION WHITCH DEPENDS ON EXPONENTS DIFFERENCE*)
LD    [ %MW996 > 0 ]
[ %MW992 := SHR( %MW992, 1 ) ]
[ %MW993 := SHR( %MW993, 1 ) ]
LD    [ %MW996 > 0 ]
AND   %S17
[ %MW992 := %MW992 OR #8000 ]
R     %S17
LD    [ %MW996 > 0 ]
[ %MW996 := %MW996 - 1 ]
JMPC  %L16
LD    1
ANDN  %M252
[ %MD990 := %MD990 + %MD992 ] (* ADDING MANTISAS*)
LD    1
AND   %M252
[ %MD990 := %MD990 - %MD992 ] (* SUBSTRACTING MANTISAS*)
LD    1                       (* NORMALISING TO THE RIGHT*)
AND   %MW991:X8
[ %MW990 := SHR( %MW990, 1 ) ]
[ %MW991 := SHR( %MW990, 1 ) ]
[ %MW996 := %MW996 + 1 ]
LD    %S17
[ %MW990 := %MW990 OR #8000 ]
R     %S17
%L17:
LD    1
ANDN  %MW991:X7
[ %MW991 := SHL( %MW991, 1 ) ]
[ %MW990 := SHL( %MW990, 1 ) ] (* NORMALISING TO THE LEFT*)
[ %MW996 := %MW996 - 1 ]
LD    %S17
[ %MW991 := %MW991 OR #1 ]
LD    1
ANDN  %MW991:X7
JMPC  %L17
LD    1
[ %MW991 := %MW991 AND #7F ]  (* REMOVING 'HIDDEN' BIT*)
[ %MW994 := %MW994 + %MW996 ] (* CORRECTING EXPONENT VALUE*)
[ %MW994 := SHL( %MW994, 7 ) ] (* SHIFTING EXPONENT VALUE TO RIGHT POSITION*)
[ %MW991 := %MW991 OR %MW994 ] (* COMBINE EXPONENT WITH MANTISA*)
LD    %M255
[ %MW991 := %MW991 OR #8000 ] (* ADDING SIGN BIT AT THE END*)
LD    1
[ %MD986 := %MD990 ]
LD    1
R     %M255
R     %M254
R     %M253
R     %M252
R     %M251
R     %M250
RET
SR5:
(*SECTTITLE:IEEE754 Division*)
(*SECTCOMMENT:*)
LD    1
[ %MD990 := %MD984 ]
[ %MD992 := %MD988 ]
LD    1
AND   %MW991:X15
ST    %M251
LD    1
AND   %MW993:X15
ST    %M252
LD    %M251
XOR   %M252
ST    %M250                   (* SIGN BIT IS S1 XOR S2*)
LD    1                       (* GETTING EXPONENT FROM INPUT A*)
[ %MW991 := %MW991 AND #7FFF ] (* BITMASKING/CLEARING SIGN BIT FROM INPUT DATA*)
[ %MW994 := %MW991 AND #7F80 ] (* GETTING EXPONENT VALUE*)
[ %MW991 := %MW991 AND #7F ]  (* CLEARING MANTISA*)
[ %MW994 := SHR( %MW994, 7 ) ] (* NORMALISING EXPONENT VALUE*)
LD    1                       (* GETTING EXPONENT FROM INPUT B*)
[ %MW993 := %MW993 AND #7FFF ] (* BITMASKING/CLEARING SIGN BIT FROM INPUT DATA*)
[ %MW995 := %MW993 AND #7F80 ] (* GETTING EXPONENT VALUE*)
[ %MW993 := %MW993 AND #7F ]  (* CLEARING MANTISA*)
[ %MW995 := SHR( %MW995, 7 ) ] (* NORMALISING EXPONENT VALUE*)
LD    1
[ %MW996 := %MW994 - %MW995 ] (* SUBSTRACTING EXPONENTS*)
[ %MW996 := %MW996 + 127 ]    (* ADDING BIAS VALUE*)
[ %MW996 := SHL( %MW996, 7 ) ] (* MOVING EXPONENT TO THE RIGHT POSITION*)
LD    [ %MD990 = 0 ]          (* UNABLE TO DIVIDE BY 0*)
S     %S18
JMPC  %L18
LD    [ %MD992 = 0 ]
S     %S18
JMPC  %L18
LD    1
[ %MW991 := %MW991 OR #80 ]   (* UNHIDING 'HIDDEN' BIT*)
[ %MW993 := %MW993 OR #80 ]
[ %MD1000 := 0 ]              (* RESULT MANTISA STORE*)
[ %MW997 := 0 ]               (* PLACE OF HBIT IN THE STORE*)
%L29:
LD    1
[ %MD998 := %MD990 / %MD992 ] (* SIMPLE DIVISION*)
[ %MD1002 := %MD998 * %MD992 ] (* MULTIPLY RESULT WITH DIVISOR*)
[ %MD990 := %MD990 - %MD1002 ] (* SUBSTRACTION OF RESULT FROM INPUT*)
LD    1
[ %MW991 := SHL( %MW991, 1 ) ] (* SHIFTING MODIFIED INPUT ONE POSITION TO LEFT*)
[ %MW990 := SHL( %MW990, 1 ) ]
LD    %S17
[ %MW991 := %MW991 OR #1 ]    (* ADDING CARRY BIT*)
R     %S17
LD    1
[ %MW1000 := %MW1000 OR %MW998 ] (* STORE CURRENT VALUE*)
LD    1
[ %MW1001 := SHL( %MW1001, 1 ) ] (* SHIFT STORE ONE BIT LEFT*)
[ %MW1000 := SHL( %MW1000, 1 ) ]
LD    %S17
[ %MW1001 := %MW1001 OR #1 ]  (* ADD CARRY BIT*)
R     %S17
LD    1
[ %MW997 := %MW997 + 1 ]      (* INCREASE STORE HBIT POSITION*)
LD    [ %MD990 <> 0 ]         (* IF THERE IS STILL SOMETHING TO DIVIDE*)
AND   [ %MW997 < 23 ]         (* AND IF THERE ISNT TOO MUCH DIVISIONS*)
JMPC  %L29                     (* DO IT AGAIN*)
%L28:
LD    [ %MW997 < 24 ]
[ %MW1001 := SHL( %MW1001, 1 ) ]
[ %MW1000 := SHL( %MW1000, 1 ) ]
LD    %S17
[ %MW1001 := %MW1001 OR #1 ]
R     %S17
LD    1
[ %MW997 := %MW997 + 1 ]
LD    [ %MW997 < 24 ]
JMPC  %L28
NOP                           (* MD1000 IS NOW OUT DIVIDED MANTISA*)
NOP
LD    1
[ %MW1001 := %MW1001 AND #7F ] (* HIDING THE 'HIDDEN' BIT AGAIN*)
[ %MW1001 := %MW1001 OR %MW996 ] (* COMBINE MANTISA WITH EXPONENT*)
LD    %M250
[ %MW1001 := %MW1001 OR #8000 ] (* ADD SIGN BIT*)
LD    1
[ %MD986 := %MD1000 ]         (* RELEASE OUTPUT*)
%L18:
LD    1
R     %S17
R     %M255
R     %M254
R     %M253
R     %M252
R     %M251
R     %M250
RET
